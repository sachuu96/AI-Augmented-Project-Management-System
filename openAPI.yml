openapi: 3.0.3
info:
  title: Product Management API
  version: 1.0.0
servers:
  - url: http://localhost:3000
components:
  parameters:
    SellerIdHeader:
      name: X-Seller-Id
      in: header
      required: true
      schema: { type: string }
      description: Simulated Auth â€” only access your own products.
  schemas:
    Product:
      type: object
      required: [id, sellerId, name, price, quantity, category, createdAt, updatedAt]
      properties:
        id: { type: string, format: uuid }
        sellerId: { type: string }
        name: { type: string }
        description:
          type: [string, null]
        price: { type: number }
        quantity: { type: integer }
        category: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    CreateProductInput:
      type: object
      required: [name, price, quantity, category]
      properties:
        name: { type: string, minLength: 1 }
        description:
          type: [string, null]
        price: { type: number, minimum: 0 }
        quantity: { type: integer, minimum: 0 }
        category: { type: string }

    Error:
      type: object
      required: [message]
      properties:
        message: { type: string }

    ProductCreated:
      type: object
      required: [type, version, occurredAt, sellerId, product]
      properties:
        type:
          type: string
          enum: ["ProductCreated"]
        version:
          type: string
          example: "1"
        occurredAt:
          type: string
          format: date-time
        sellerId:
          type: string
        product:
          $ref: "#/components/schemas/Product"

    ProductUpdated:
      type: object
      required: [type, version, occurredAt, sellerId, product, changes]
      properties:
        type:
          type: string
          enum: ["ProductUpdated"]
        version:
          type: string
          example: "1"
        occurredAt:
          type: string
          format: date-time
        sellerId:
          type: string
        product:
          $ref: "#/components/schemas/Product"
        changes:
          $ref: "#/components/schemas/UpdateProductInput"

    ProductDeleted:
      type: object
      required: [type, version, occurredAt, sellerId, productId]
      properties:
        type:
          type: string
          enum: ["ProductDeleted"]
        version:
          type: string
          example: "1"
        occurredAt:
          type: string
          format: date-time
        sellerId:
          type: string
        productId:
          type: string
          format: uuid

    LowStockWarning:
      type: object
      required: [type, version, occurredAt, sellerId, productId, quantity, threshold]
      properties:
        type:
          type: string
          enum: ["LowStockWarning"]
        version:
          type: string
          example: "1"
        occurredAt:
          type: string
          format: date-time
        sellerId:
          type: string
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
        category:  
          type: string 
        threshold:
          type: integer
          example: 10
paths:
  /products:
    get:
      summary: List products for the seller
      parameters: [ { $ref: "#/components/parameters/SellerIdHeader" } ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Product" }
    post:
      summary: Create product (emits ProductCreated)
      parameters: [ { $ref: "#/components/parameters/SellerIdHeader" } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CreateProductInput" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Product" }
        "400": { description: Bad Request, content: { application/json: { schema: { $ref: "#/components/schemas/Error" } } } }
  /products/{id}:
    put:
      summary: Update product (emits ProductUpdated and possible LowStockWarning)
      parameters:
        - { $ref: "#/components/parameters/SellerIdHeader" }
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpdateProductInput" }
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Product" } } } }
        "404": { description: Not Found }
    delete:
      summary: Delete product (emits ProductDeleted)
      parameters:
        - { $ref: "#/components/parameters/SellerIdHeader" }
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "204": { description: No Content }
  /events/stream:
    get:
      summary: Server-Sent Events stream for low-stock alerts
      description: |
        Opens a long-lived connection that pushes server-sent events (SSE).
        The stream emits `LowStockWarning` events when product stock drops below a threshold.
      responses:
        "200":
          description: text/event-stream with LowStockWarning events
          content:
            text/event-stream:
              schema:
                type: object
                properties:
                  event:
                    type: string
                    enum: ["LowStockWarning"]
                  data:
                    $ref: "#/components/schemas/LowStockWarning"